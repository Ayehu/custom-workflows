<?xml version="1.0" encoding="utf-8"?>
<Workflow>
  <WorkflowInfo Name="SSH - Linux - Service Status" Description="Simple template using the service command to query the status of all available system services using the service command." Details="&lt;p&gt;Simple template using the service command to query the status of all available system services using the &lt;strong&gt;service &lt;/strong&gt;command.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;This is achieved with the following command:&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;service --status-all 2&amp;gt; /dev/null | sed 's/\[//g' | sed 's/\]//g' | sed 's/ - /Down/g' | sed 's/ + /Up/g' | awk '{ print $2&quot;\t&quot;$1 }'&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;...where the &lt;strong&gt;--status-all&lt;/strong&gt; flag returns a list of system services and their corresponding statuses.  The &lt;strong&gt;2&amp;gt; /dev/null &lt;/strong&gt;redirect ignores STDERR output.  The results are then piped to a series of &lt;strong&gt;sed &lt;/strong&gt;commands that parse out unwanted characters and then finally piped to &lt;strong&gt;awk &lt;/strong&gt;where the second column is printed before the first column and a tab is added between each.&lt;/p&gt;" XML="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;SequentialWorkflowActivity xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/workflow&quot; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot; x:Name=&quot;CustomWorkflow&quot; x:Class=&quot;WorkflowDesignerControl.CustomWorkflow&quot;&gt;&lt;StartSSHSession x:Name=&quot;ssh_connect&quot; id=&quot;274&quot; name=&quot;StartSSHSession&quot; visible=&quot;True&quot; disabled=&quot;False&quot; isFavorite=&quot;False&quot; IsValid=&quot;True&quot; Timeout=&quot;00:01:00&quot; TimeInSeconds=&quot;60&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; TargetModuleID=&quot;&quot; TargetModuleName=&quot;&quot; Path=&quot;{x:Null}&quot; DisplayName=&quot;Start SSH Session&quot; Description=&quot;Starts an SSH session&quot; Port=&quot;22&quot; MaxSessionTime=&quot;00:10:00&quot; HostId=&quot;4&quot; HostName=&quot;local shell server&quot; UserName=&quot;&quot; Password=&quot;&quot; StartSession=&quot;SSH&quot; OSType=&quot;0&quot; certtype=&quot;&quot; certpath=&quot;&quot; notes=&quot;Initialize SSH session.&quot; TypeName=&quot;StartSSHSession&quot; /&gt;&lt;SendSSHCommand x:Name=&quot;cmd_service_status&quot; id=&quot;271&quot; name=&quot;SendSSHCommand&quot; visible=&quot;True&quot; disabled=&quot;False&quot; isFavorite=&quot;False&quot; IsValid=&quot;True&quot; Timeout=&quot;00:01:00&quot; TimeInSeconds=&quot;60&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; TargetModuleID=&quot;&quot; TargetModuleName=&quot;&quot; Path=&quot;{x:Null}&quot; DisplayName=&quot;Send SSH Command&quot; Description=&quot;Sends a single SSH protocol command to an open SSH session&quot; SessionName=&quot;ssh_connect&quot; Comm=&quot;service --status-all 2&amp;gt; /dev/null | sed 's/\[//g' | sed 's/\]//g' | sed 's/ - /Down/g' | sed 's/ + /Up/g' | awk '{ print $2&amp;quot;\t&amp;quot;$1 }'&quot; Prompt=&quot;&quot; HostId=&quot;-1&quot; HostName=&quot;{x:Null}&quot; OSType=&quot;0&quot; notes=&quot;The status command is executed with the --status-all flag to return a list of system services and their corresponding statuses.  The 2&amp;gt; /dev/null redirect ignores STDERR output.  The results are then piped to a series of sed commands that parse out unwanted characters and then finally piped to awk where the second column is printed before the first column and a tab is added between each.&quot; TypeName=&quot;SendSSHCommand&quot; /&gt;&lt;ConvertTextToTable x:Name=&quot;table_service_status&quot; id=&quot;317&quot; name=&quot;ConvertTextToTable&quot; visible=&quot;True&quot; disabled=&quot;False&quot; isFavorite=&quot;False&quot; IsValid=&quot;True&quot; Timeout=&quot;00:01:00&quot; TimeInSeconds=&quot;60&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; TargetModuleID=&quot;&quot; TargetModuleName=&quot;&quot; Path=&quot;{x:Null}&quot; DisplayName=&quot;Convert Text to Table&quot; Description=&quot;Converts a text variable into a table according to predefined column/row delimiters&quot; TheValue=&quot;Service	Status&amp;#xD;&amp;#xA;%cmd_service_status%&quot; ColumnsSelection=&quot;1&quot; ColumnsDelimiterText=&quot;&quot; ColumnsDelimiter=&quot;Tab&quot; ColumnsDelimiterSelection=&quot;Tab&quot; ColumnsRowNumber=&quot;1&quot; RowsSelection=&quot;1&quot; RowsDelimiterText=&quot;&quot; RowsDelimiterSelection=&quot;Carriage Return&quot; RowsDelimiter=&quot;Carriage Return&quot; notes=&quot;Convert command output to table.&quot; TypeName=&quot;ConvertTextToTable&quot; /&gt;&lt;TerminateSSHSession x:Name=&quot;ssh_disconnect&quot; id=&quot;275&quot; name=&quot;TerminateSSHSession&quot; visible=&quot;True&quot; disabled=&quot;False&quot; isFavorite=&quot;False&quot; IsValid=&quot;True&quot; notes=&quot;End SSH session.&quot; Timeout=&quot;00:01:00&quot; TimeInSeconds=&quot;60&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; TargetModuleID=&quot;&quot; TargetModuleName=&quot;&quot; Path=&quot;{x:Null}&quot; DisplayName=&quot;&quot; Description=&quot;Terminates an SSH session&quot; SessionName=&quot;ssh_connect&quot; HostId=&quot;-1&quot; HostName=&quot;{x:Null}&quot; OSType=&quot;0&quot; TypeName=&quot;TerminateSSHSession&quot; /&gt;&lt;/SequentialWorkflowActivity&gt;" />
  <Tags>
  </Tags>
</Workflow>